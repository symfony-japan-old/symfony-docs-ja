.. 2011/07/24 madapaja 123515c0936079198c55693e9151f257dbb02e10

.. index::
   single: Tests

パフォーマンス
==============

Symfony2 は細かい設定なしに早いです。もちろん、本当にスピードを求めるなら、
Symfony をさらに早くする多くの方法があります。この章では
Symfony アプリケーションをより早くする、一般的で強力な方法を紹介します。

.. index::
   single: Performance; Byte code cache

バイトコードキャッシュ（例：APC）の利用
---------------------------------------

パフォーマンスを向上させるためにすべき、一つのベスト（で簡単）な方法は
「バイトコードキャッシュ」を使用することです。バイトコードキャッシュのアイデアは、
毎回 PHP ソースコードをリコンパイルする必要を無くすことです。
いくつかの `バイトコードキャッシュ`_ が利用でき、そのいくつかはオープンソースです。
最も幅広く使われているバイトコードキャッシュは、おそらく `APC`_ でしょう。

バイトコードキャッシュを使用することのデメリットはなく、また Symfony2 は
この環境で問題なく実行されるよう設計されています。

さらなる最適化
~~~~~~~~~~~~~~

バイトコードキャッシュは通常、ソースファイルの変更を監視します。これは
ソースファイルの変更時に、バイトコードが自動的にリコンパイルされることを確実にします。
これは、本当に便利ですが、オーバーヘッドになることは明らかです。

このため、いくつかのバイトコードキャッシュはこれらのチェックを無効にする
オプションを提供しています。もちろん、これらのチェックを無効にした場合、
ソースファイルの変更時にサーバー管理者がキャッシュをクリアする必要があります。
そうしないと、変更した内容を見られません。

たとえば APC でこれらのチェックを無効にするには、php.ini 設定ファイルに
``apc.stat=0`` という記述を追加するだけです。

.. index::
   single: Performance; Autoloader

キャッシュ Autoloader (``ApcUniversalClassLoader`` など)の利用
--------------------------------------------------------------

Symfony2 スタンダードエディションのデフォルト設定では `autoloader.php`_
ファイル内で ``UniversalClassLoader`` が使用されます。このオートローダーは
登録されたディレクトリに配置された新しいクラスを自動的に検知するため、
簡単に利用できます。

しかし、このローダーは設定されたすべての名前空間をファイルが見つかるまで
``file_exists`` を繰り返し呼び出すため、コストがかかります。

一番簡単な解決方法は各クラスを最初に見つけた後、そのロケーションを
キャッシュしておくことです。Symfony では ``UniversalClassLoader`` を継承した
クラス - ``ApcUniversalClassLoader`` - ローダーにより、APC
でクラスのロケーションを保持できます。

このクラスローダーを使うには、 ``autoloader.php`` を下記のように変更します。

.. code-block:: php

    // app/autoload.php
    require __DIR__.'/../vendor/symfony/src/Symfony/Component/ClassLoader/UniversalClassLoader.php';
    require __DIR__.'/../vendor/symfony/src/Symfony/Component/ClassLoader/ApcUniversalClassLoader.php';

    use Symfony\Component\ClassLoader\ApcUniversalClassLoader;

    $loader = new ApcUniversalClassLoader('some caching unique prefix');
    // ...

.. note::

    APC オートローダーを使う際、新しいクラスを追加したら、それまでと同じように
    自動的に検出されて、問題なく動くようになります。
    （キャッシュを「クリア」する必要はありません）
    しかし、名前空間のロケーション、もしくはプレフィックスを変更した場合、
    APC キャッシュをフラッシュする必要があります。そうしなければ、
    オートローダーは古いロケーションを見続けます。

.. index::
   single: Performance; Bootstrap files

ブートストラップファイルの使用
------------------------------

最適化の柔軟性とコードの再利用を確保するために、Symfony2 アプリケーションは
様々なクラスとサードパーティーコンポーネントを利用します。しかし、リクエスト毎に
別々のファイルから、それらのすべてのクラスの読み込みは相当なオーバーヘッドが生じます。
このオーバーヘッドを減らすために、Symfony2 スタンダードエディションは
`bootstrap file`_ と呼ばれる一つのファイルに複数のクラス定義をまとめたファイルを
生成するためにスクリプトを提供します。このファイル（コアクラスの多くのコピーを含んでいる）を
インクルードすることで、Symfony はこれらのクラスのソースファイルを個別にインクルードする
必要がなくなります。これによりかなりのディスクIOを減らせます。

Symfony2 スタンダードエディションを使用しているなら、すでにこのブートストラップファイルを
使用しているでしょう。フロントコントローラ（通常 ``app.php`` ）を開いて、
以下の行が存在しコメントアウトされていないことを確認してください。（正確には
Symfony の :doc:`HTTP キャッシュレイヤー </book/http_cache>` によって決まります。）

::

    require_once __DIR__.'/../app/bootstrap.php.cache';
    require_once __DIR__.'/../app/bootstrap_cache.php.cache';

ブートストラップファイルの使用時は 2 つのデメリットがあることを注意してください。

* オリジナルのソースが変更された場合、ブートストラップファイルの再生性が必要です。
  （たとえば Symfony2 のソースやベンダーライブラリをアップデートする時など）

* デバッグ時、ブートストラップファイル内にブレークポイントを入れる必要があります。

Symfony2 スタンダードエディションを使用しているなら、ブートストラップファイルは
ベンダーライブラリを更新後、 ``php bin/vendors install`` コマンドによって
自動的に再構築されます。

ブートストラップファイルとバイトコードキャッシュ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

バイトコードキャッシュ使用時でも、ブートストラップファイルの使用することで、
ファイル更新の監視を行う対象ファイルが少なくなるため、
パフォーマンスをさらに向上させられます。もちろん、もしバイトコードキャッシュで
この機能を無効にしている場合（たとえば APC での ``apc.stat=0`` ）は、
ブートストラップファイルを利用する利点はありません。

.. _`バイトコードキャッシュ`: http://en.wikipedia.org/wiki/List_of_PHP_accelerators
.. _`APC`: http://php.net/manual/en/book.apc.php
.. _`autoloader.php`: https://github.com/symfony/symfony-standard/blob/master/app/autoload.php
.. _`ブートストラップファイル`: https://github.com/sensio/SensioDistributionBundle/blob/master/Resources/bin/build_bootstrap.php
